// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetScriptParams creates a new GetScriptParams object
// no default values defined in spec.
func NewGetScriptParams() GetScriptParams {

	return GetScriptParams{}
}

// GetScriptParams contains all the bound params for the get script operation
// typically these are obtained from a http.Request
//
// swagger:parameters getScript
type GetScriptParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*List of packages to be installed
	  Required: true
	  Min Length: 1
	  In: query
	*/
	Pkg string
	/*Specifies whether the update action has been requested
	  In: query
	*/
	PkgUpdate *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetScriptParams() beforehand.
func (o *GetScriptParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qPkg, qhkPkg, _ := qs.GetOK("pkg")
	if err := o.bindPkg(qPkg, qhkPkg, route.Formats); err != nil {
		res = append(res, err)
	}

	qPkgUpdate, qhkPkgUpdate, _ := qs.GetOK("pkg_update")
	if err := o.bindPkgUpdate(qPkgUpdate, qhkPkgUpdate, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindPkg binds and validates parameter Pkg from query.
func (o *GetScriptParams) bindPkg(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("pkg", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("pkg", "query", raw); err != nil {
		return err
	}

	o.Pkg = raw

	if err := o.validatePkg(formats); err != nil {
		return err
	}

	return nil
}

// validatePkg carries on validations for parameter Pkg
func (o *GetScriptParams) validatePkg(formats strfmt.Registry) error {

	if err := validate.MinLength("pkg", "query", o.Pkg, 1); err != nil {
		return err
	}

	return nil
}

// bindPkgUpdate binds and validates parameter PkgUpdate from query.
func (o *GetScriptParams) bindPkgUpdate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("pkg_update", "query", "bool", raw)
	}
	o.PkgUpdate = &value

	return nil
}
