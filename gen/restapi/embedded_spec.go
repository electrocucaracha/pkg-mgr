// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "This application provides bash scripts for the installation of packages on different Linux distributions",
    "title": "cURL Package Manager Server",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/install_pkg": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "getScript",
        "parameters": [
          {
            "$ref": "#/parameters/pkg"
          },
          {
            "$ref": "#/parameters/pkg_update"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a bash script",
            "schema": {
              "description": "contains the bash instructions to install the desired package",
              "type": "string"
            }
          },
          "404": {
            "$ref": "#/responses/errorNotFound"
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      }
    }
  },
  "parameters": {
    "pkg": {
      "minLength": 1,
      "type": "string",
      "description": "List of packages to be installed",
      "name": "pkg",
      "in": "query",
      "required": true
    },
    "pkg_update": {
      "type": "boolean",
      "description": "Specifies whether the update action has been requested",
      "name": "pkg_update",
      "in": "query"
    }
  },
  "responses": {
    "errorNotFound": {
      "description": "The bash script was not found"
    },
    "errorResponse": {
      "description": "Error"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "This application provides bash scripts for the installation of packages on different Linux distributions",
    "title": "cURL Package Manager Server",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/install_pkg": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "operationId": "getScript",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "List of packages to be installed",
            "name": "pkg",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Specifies whether the update action has been requested",
            "name": "pkg_update",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "returns a bash script",
            "schema": {
              "description": "contains the bash instructions to install the desired package",
              "type": "string"
            }
          },
          "404": {
            "description": "The bash script was not found"
          },
          "default": {
            "description": "Error"
          }
        }
      }
    }
  },
  "parameters": {
    "pkg": {
      "minLength": 1,
      "type": "string",
      "description": "List of packages to be installed",
      "name": "pkg",
      "in": "query",
      "required": true
    },
    "pkg_update": {
      "type": "boolean",
      "description": "Specifies whether the update action has been requested",
      "name": "pkg_update",
      "in": "query"
    }
  },
  "responses": {
    "errorNotFound": {
      "description": "The bash script was not found"
    },
    "errorResponse": {
      "description": "Error"
    }
  }
}`))
}
